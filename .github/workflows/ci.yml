name: CI

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm' # Built-in pnpm caching

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.14.0 # Match your local pnpm version
        run_install: false

    - name: Debug pnpm version and lockfile
      run: |
        echo "pnpm version:"
        pnpm --version
        echo "Lockfile presence:"
        ls -la | grep pnpm-lock.yaml

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run linting
      run: pnpm lint

    - name: Run tests with coverage
      run: pnpm test:coverage

    - name: Legal compliance verification
      run: |
        echo "üîç Running legal compliance verification..."
        NODE_ENV=production ./scripts/verify-compliance.sh

    - name: Build application
      run: pnpm build

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  feature-flag-compliance:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.14.0 # Match your local pnpm version
        run_install: false

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Production safety verification
      run: |
        echo "üö® Production Deployment Safety Check"
        NODE_ENV=production ./scripts/verify-compliance.sh

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, feature-flag-compliance]
    if: github.ref == 'refs/heads/staging'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.14.0 # Match your local pnpm version
        run_install: false

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Staging deployment trigger
      run: |
        echo "üöÄ Staging deployment triggered"
        echo "Vercel will automatically deploy this branch to staging environment"
        echo "Staging URL will be available at: https://btc-tracker-git-staging-[username].vercel.app"